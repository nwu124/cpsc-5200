@page "/demo"
@using BlazorServer.Models
@using System.Data;
@using MySql.Data.MySqlClient;
@using Dapper;




<EditForm Model="@user" OnValidSubmit="@Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <center>
        <h1>Address Search</h1>
    </center>
    <div class="form-group row">
        <label for="txtFirstName" class="col-sm-2 col-form-label">Street</label>
        <div class="col-sm-10">
            <InputText id="_StreetAddress" class="form-control" @bind-Value="@user.StreetAddress"></InputText>
            <ValidationMessage For="@(() => user.StreetAddress)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="_Neighborhood" class="col-sm-2 col-form-label">Neighborhood</label>
        <div class="col-sm-10">
            <InputText id="_Neighborhood" class="form-control" @bind-Value="@user.Neighborhood"></InputText>
            <ValidationMessage For="@(() => user.Neighborhood)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="_City" class="col-sm-2 col-form-label">City</label>
        <div class="col-sm-10">
            <InputText id="_City" class="form-control" @bind-Value="@user.City"></InputText>
            <ValidationMessage For="@(() => user.City)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="_County" class="col-sm-2 col-form-label">County</label>
        <div class="col-sm-10">
            <InputText id="_County" class="form-control" @bind-Value="@user.County"></InputText>
            <ValidationMessage For="@(() => user.County)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="_State" class="col-sm-2 col-form-label">State</label>
        <div class="col-sm-10">
            <InputText id="_State" class="form-control" @bind-Value="@user.State"></InputText>
            <ValidationMessage For="@(() => user.State)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="_Province" class="col-sm-2 col-form-label">Province</label>
        <div class="col-sm-10">
            <InputText id="_Province" class="form-control" @bind-Value="@user.Province"></InputText>
            <ValidationMessage For="@(() => user.Province)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="_PostalCode" class="col-sm-2 col-form-label">Postal Code</label>
        <div class="col-sm-10">
            <InputText id="_PostalCode" class="form-control" @bind-Value="@user.PostalCode"></InputText>
            <ValidationMessage For="@(() => user.PostalCode)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="_PostOffice" class="col-sm-2 col-form-label">Post Office</label>
        <div class="col-sm-10">
            <InputText id="_PostOffice" class="form-control" @bind-Value="@user.PostOffice"></InputText>
            <ValidationMessage For="@(() => user.PostOffice)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="_Country" class="col-sm-2 col-form-label">Country</label>
        <div class="col-sm-10">
            <InputText id="_Country" class="form-control" @bind-Value="@user.Country"></InputText>
            <ValidationMessage For="@(() => user.Country)"></ValidationMessage>
        </div>
    </div>
    <button class="btn btn-primary" @onclick="SearchExactData">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Search Exact Match&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>
    <button class="btn btn-warning" @onclick="SearchPartialDataLocal">Search Partial Matches in Specified Country</button>
    <button class="btn btn-danger" @onclick="SearchPartialDataInternational">Search Partial Matches in All Countries</button>
    <br />
    <br />
    <br />
    <h2>Search Results:</h2>
    @if (searchResults == null || searchResults.Count == 0)
    {
        <p>None</p>
    }
    else
    {
        @foreach (var i in searchResults)
        {
            <p>
                @i.StreetAddress, @i.Neighborhood, @i.City, @i.County, @i.State, @i.Province, @i.PostalCode, @i.PostOffice, @i.Country
            </p>
        }
    }
    <br />

    <center>
        <h1>Country Format</h1>
    </center>
    <div class="form-group row">
        <label for="_Country" class="col-sm-2 col-form-label">Country</label>
        <div class="col-sm-10">
            <InputText id="_Country" class="form-control" @bind-Value="@countrySearch.Country"></InputText>
            <ValidationMessage For="@(() => countrySearch.Country)"></ValidationMessage>
        </div>
    </div>
    <button class="btn btn-primary" @onclick="SearchCountry">Search Country Format</button>
    <br />
    <br />
    <br />
    <h2>Required Fields:</h2>
    @if (country == null || country.Count == 0)
    {
        <p>None</p>
    }
    else
    {
        @foreach (var i in country)
        {
            <p>
                @if (i.StreetAddress == 1)
                {
                <p>Street Address Required</p>}
                @if (i.Neighborhood == 1)
                {<p>Neighborhood Required</p>}
                @if (i.City == 1)
                {<p>City Required</p>}
                @if (i.County == 1)
                {<p>County Required</p>}
                @if (i.State == 1)
                {<p>State Required</p>}
                @if (i.Province == 1)
                {<p>Province Required</p>}
                @if (i.PostalCode == 1)
                {<p>Postal Code Required</p>}
                @if (i.PostOffice == 1)
                {<p>Post Office Required</p>}
                </p>
            }
    }
</EditForm>

@code {
    string connectionString = "Server=127.0.0.1;Port=3306;database=addresses;user id=root;password=nathaniel";
    // string connectionString = "Server=127.0.0.1;Port=3306;database=addresses;user id=root;password=Higgins5021";

    AddressModel user;
    AddressModel countrySearch;
    List<AddressModel> searchResults;
    List<CountryFormatModel> country;

    protected override void OnInitialized()
    {
        user = new AddressModel();
        countrySearch = new AddressModel();
    }

    public void Submit()
    {
        // this method calls on valid form
        // save form data by posting data to your api
    }

    public async Task SearchExactData()
    {
        string sql = "use addresses; " +
            "select * from addressdb " +
            "where StreetAddress=@StreetAddress and Neighborhood=@Neighborhood and City=@City and County=@County and State=@State " +
            "and Province=@Province and PostalCode=@PostalCode and PostOffice=@PostOffice and Country=@Country;";

        using (IDbConnection connection = new MySqlConnection(connectionString))
        {
            var rows = await connection.QueryAsync<AddressModel>(sql, new
            {
                StreetAddress = user.StreetAddress,
                Neighborhood = user.Neighborhood,
                City = user.City,
                County = user.County,
                State = user.State,
                Province = user.Province,
                PostalCode = user.PostalCode,
                PostOffice = user.PostOffice,
                Country = user.Country
            });
            searchResults = rows.ToList();
        }
        await OnInitializedAsync();
    }

    public async Task SearchPartialDataLocal()
    {
        string sql = "use addresses; " +
            "select * from addressdb " +
            "where (StreetAddress=@StreetAddress or Neighborhood=@Neighborhood or City=@City or County=@County or State=@State " +
            "or Province=@Province or PostalCode=@PostalCode or PostOffice=@PostOffice) and Country=@Country;";


        using (IDbConnection connection = new MySqlConnection(connectionString))
        {
            var rows = await connection.QueryAsync<AddressModel>(sql, new
            {
                StreetAddress = user.StreetAddress,
                Neighborhood = user.Neighborhood,
                City = user.City,
                County = user.County,
                State = user.State,
                Province = user.Province,
                PostalCode = user.PostalCode,
                PostOffice = user.PostOffice,
                Country = user.Country
            });
            searchResults = rows.ToList();
        }

        await OnInitializedAsync();
    }
    public async Task SearchPartialDataInternational()
    {
        string sql = "use addresses; " +
            "select * from addressdb " +
            "where StreetAddress=@StreetAddress or Neighborhood=@Neighborhood or City=@City or County=@County or State=@State " +
            "or Province=@Province or PostalCode=@PostalCode or PostOffice=@PostOffice or Country=@Country;";


        using (IDbConnection connection = new MySqlConnection(connectionString))
        {
            var rows = await connection.QueryAsync<AddressModel>(sql, new
            {
                StreetAddress = user.StreetAddress,
                Neighborhood = user.Neighborhood,
                City = user.City,
                County = user.County,
                State = user.State,
                Province = user.Province,
                PostalCode = user.PostalCode,
                PostOffice = user.PostOffice,
                Country = user.Country
            });
            searchResults = rows.ToList();
        }

        await OnInitializedAsync();
    }

    public async Task SearchCountry()
    {
        string sql = "use addresses; " +
            "select * from countriesdb " +
            "where Country=@Country;";

        using (IDbConnection connection = new MySqlConnection(connectionString))
        {
            var rows = await connection.QueryAsync<CountryFormatModel>(sql, new
            {
                Country = countrySearch.Country
            });
            country = rows.ToList();
        }

    }
}